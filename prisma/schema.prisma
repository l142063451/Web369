// Prisma schema for Ummid Se Hari PWA
// Based on REQUIREMENTS_AND_GOALS.md ยง8 Data Model

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION & USERS =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  phone           String?
  locale          String    @default("en")
  emailVerified   DateTime?
  image           String?
  twoFAEnabled    Boolean   @default(false)
  twoFASecret     String?
  recoveryCodes   String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  roles           UserRole[]
  
  // User activities
  auditLogs       AuditLog[]
  submissions     Submission[]
  pledges         Pledge[]
  carbonCalcRuns  CarbonCalcRun[]
  donations       Donation[]
  eligibilityRuns EligibilityRun[]
  
  // Content management
  createdPages    Page[] @relation("PageCreatedBy")
  updatedPages    Page[] @relation("PageUpdatedBy")
  createdMedia    Media[]
  createdForms    Form[]
  assignedSubmissions Submission[] @relation("AssignedTo")
  directoryEntries DirectoryEntry[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users UserRole[]
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

// ===== CONTENT MANAGEMENT =====

model Page {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  locale      String    @default("en")
  status      PageStatus @default(DRAFT)
  blocks      Json      @default("[]")
  seo         Json      @default("{}")
  version     Int       @default(1)
  createdBy   String
  updatedBy   String
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  createdByUser User @relation("PageCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("PageUpdatedBy", fields: [updatedBy], references: [id])

  @@index([status, locale])
}

enum PageStatus {
  DRAFT
  STAGED
  PUBLISHED
}

model Media {
  id          String    @id @default(cuid())
  url         String
  alt         String?
  caption     String?
  meta        Json      @default("{}")
  scannedAt   DateTime?
  isPublic    Boolean   @default(false)
  createdBy   String
  createdAt   DateTime  @default(now())

  createdByUser User @relation(fields: [createdBy], references: [id])

  @@index([isPublic, scannedAt])
}

// ===== FORM BUILDER & SUBMISSIONS =====

model Form {
  id        String   @id @default(cuid())
  name      String
  schema    Json
  slaDays   Int      @default(7)
  workflow  Json     @default("{}")
  active    Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser User         @relation(fields: [createdBy], references: [id])
  submissions   Submission[]
}

model Submission {
  id         String           @id @default(cuid())
  formId     String
  userId     String?
  data       Json
  files      String[]         @default([])
  status     SubmissionStatus @default(PENDING)
  assignedTo String?
  geo        Json?
  history    Json             @default("[]")
  slaDue     DateTime
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  form         Form  @relation(fields: [formId], references: [id])
  user         User? @relation(fields: [userId], references: [id])
  assignedUser User? @relation("AssignedTo", fields: [assignedTo], references: [id])

  @@index([status, slaDue, formId])
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
  ESCALATED
}

// ===== PROJECTS & BUDGETS =====

model Project {
  id          String        @id @default(cuid())
  title       String
  type        String
  ward        String?
  budget      Decimal       @db.Decimal(12, 2)
  spent       Decimal       @db.Decimal(12, 2) @default(0)
  status      ProjectStatus @default(PLANNED)
  startDate   DateTime?
  endDate     DateTime?
  milestones  Json          @default("[]")
  geo         Json?
  contractors Json          @default("{}")
  docs        String[]      @default([])
  tags        String[]      @default([])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  projectMilestones Milestone[]
  budgetLines      BudgetLine[]

  @@index([status, ward])
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model BudgetLine {
  id          String      @id @default(cuid())
  projectId   String
  category    String      // e.g., "Materials", "Labor", "Equipment", "Overhead"
  subcategory String?     // e.g., "Cement", "Steel", "Contractor Fee"
  allocated   Decimal     @db.Decimal(12, 2)
  spent       Decimal     @db.Decimal(12, 2) @default(0)
  committed   Decimal     @db.Decimal(12, 2) @default(0) // Committed but not yet spent
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, category])
}

model Milestone {
  id        String   @id @default(cuid())
  projectId String
  title     String
  date      DateTime
  progress  Int      @default(0) // 0-100 percentage
  notes     String?
  photos    String[] @default([])
  geo       Json?    // GeoJSON for milestone location
  latitude  Float?   // For easier querying
  longitude Float?   // For easier querying
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([latitude, longitude])
}

// ===== SCHEMES & ELIGIBILITY =====

model Scheme {
  id              String   @id @default(cuid())
  title           String
  category        String
  criteria        Json
  docsRequired    String[] @default([])
  processSteps    String[] @default([])
  links           String[] @default([])
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  eligibilityRuns EligibilityRun[]

  @@index([category, active])
}

model EligibilityRun {
  id       String   @id @default(cuid())
  schemeId String
  userId   String?
  answers  Json
  result   Json
  createdAt DateTime @default(now())

  scheme Scheme @relation(fields: [schemeId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])
}

// ===== EVENTS & NOTICES =====

model Event {
  id           String    @id @default(cuid())
  title        String
  start        DateTime
  end          DateTime
  location     String?
  rsvpEnabled  Boolean   @default(false)
  description  String?
  attachments  String[]  @default([])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Notice {
  id          String   @id @default(cuid())
  title       String
  category    String
  deadline    DateTime?
  body        String
  attachments String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category, deadline])
}

// ===== DIRECTORY & ECONOMY =====

model DirectoryEntry {
  id          String  @id @default(cuid())
  type        String
  name        String
  contact     Json    @default("{}")
  description String?
  products    Json    @default("{}")
  geo         Json?
  approved    Boolean @default(false)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@index([type, approved])
}

// ===== COMPLAINTS & PLEDGES =====

model Complaint {
  id         String           @id @default(cuid())
  category   String
  details    String
  geo        Json?
  media      String[]         @default([])
  status     SubmissionStatus @default(PENDING)
  slaDue     DateTime
  history    Json             @default("[]")
  assignedTo String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([status, category, slaDue])
}

model Pledge {
  id            String      @id @default(cuid())
  userId        String?
  pledgeType    PledgeType
  amount        Int
  geo           Json?
  approved      Boolean     @default(false)
  publicConsent Boolean     @default(false)
  createdAt     DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([pledgeType, approved])
}

enum PledgeType {
  TREE
  SOLAR
  WASTE
  WATER
}

// ===== CARBON CALCULATOR =====

model CarbonCalcRun {
  id        String   @id @default(cuid())
  userId    String?
  inputs    Json
  output    Json
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

// ===== DONATIONS =====

model Donation {
  id            String  @id @default(cuid())
  donorName     String?
  type          String
  value         Decimal @db.Decimal(10, 2)
  publicConsent Boolean @default(false)
  upiRef        String?
  userId        String?
  createdAt     DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([type, publicConsent])
}

// ===== TRANSLATIONS =====

model TranslationKey {
  id          String   @id @default(cuid())
  key         String   @unique
  defaultText String
  module      String
  createdAt   DateTime @default(now())

  translations TranslationValue[]
}

model TranslationValue {
  id     String @id @default(cuid())
  keyId  String
  locale String
  text   String

  translationKey TranslationKey @relation(fields: [keyId], references: [id], onDelete: Cascade)

  @@unique([keyId, locale])
}

// ===== AUDIT LOGS =====

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  action     String
  resource   String
  resourceId String
  diff       Json     @default("{}")
  createdAt  DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id])

  @@index([resource, resourceId, createdAt])
  @@index([actorId, createdAt])
}

// ===== NOTIFICATIONS =====

model Notification {
  id          String             @id @default(cuid())
  channel     NotificationChannel
  templateId  String?
  audience    Json               @default("{}")
  payload     Json
  status      NotificationStatus @default(PENDING)
  stats       Json               @default("{}")
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime           @default(now())

  @@index([status, scheduledAt])
  @@index([channel, status])
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  WEB_PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

// ===== SETTINGS =====

model Setting {
  id        String      @id @default(cuid())
  key       String      @unique
  value     Json
  scope     SettingScope @default(GLOBAL)
  updatedAt DateTime    @updatedAt
}

enum SettingScope {
  GLOBAL
  MODULE
}